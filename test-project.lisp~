;;;; test-project.lisp

(in-package #:test-project)

;;; "test-project" goes here. Hacks and glory await!
;;; initialize git
;;; push it up to github
(defun hello ()
  (print (num-islands *grid*)))

;;leetcode question islands 2d array find all islands
;;approach one have a list of all the places you've already been and mark the off
(defun num-islands (grid)
  (let ((count-islands 0)
	(unchecked-grid (make-array (array-dimensions grid) :initial-element nil)))
    (if (null grid)
	0
	(progn
	  (let ((rr 0)
		(cc 0))
	    (while (< rr (array-dimension grid 0))
	      (setf cc 0)
	      (while (< cc (array-dimension grid 1))
		(if (and (valid-point? grid rr cc)
			 (not (already-checked? unchecked-grid rr cc)))
		    (let ((curritem (aref grid rr cc)))		     
		      (if (eq 1 curritem) (incf count-islands))
		      (find-similar-values curritem rr cc grid unchecked-grid)))
		(incf cc))
	      (incf rr)))))
    count-islands))
	     
(defmacro while (test &body body)
  `(do ()                                                
       ((not ,test))
     ,@body))

(defun find-similar-values (initvalue r c grid unchecked-grid)
  (if (and (valid-point? grid r c) (not (already-checked? unchecked-grid r c)) (eq initvalue (aref grid r c)))
      (progn
	(setf (aref unchecked-grid r c) t)
	(find-similar-values initvalue (1+ r) c grid unchecked-grid); down
	(find-similar-values initvalue r (1+ c) grid unchecked-grid); right
	(find-similar-values initvalue (- r 1) c grid unchecked-grid); up
	(find-similar-values in  itvalue r (- c 1) grid unchecked-grid)))); left

(defun valid-point? (grid r c)
  (if (and (< r (array-dimension grid 0)) (< c (array-dimension grid 1))
	   (>= r 0) (>= c 0))
      t nil))

(defun already-checked? (grid r c)
  (if (null (aref grid r c)) nil t))

(defparameter *grid* #2A((1 1 1 0 0) (1 1 0 0 0) (0 0 1 0 0) (0 0 0 1 1)))

(num-islands *grid*)

;;solve using less memory assume no secondary array check off
;;add already seen stuff into a hash table
(defun num-islands2 (grid)
  (let ((count 0)
	(island-hash (make-hash-table :test #'equalp))
	(i 0)
	(j 0))	    
    (cond ((null grid) 0)
	  ((> 2 (length (array-dimensions grid))) 0)
	  (t 
	   (while (< i (array-dimension grid 0))
	     (setf j 0)
	     (while (< j (array-dimension grid 1))
	       (if (and (eq 1 (aref grid i j)) (null (gethash (list i j) island-hash)))
		   (find-adjacent-land i j grid island-hash (incf count)))
	       (incf j))
	     (incf i))))
    (print count)
    island-hash))
	       
								


(defun find-adjacent-land (r c grid hashtable islandnum)
  (if (and (valid-point? grid r c) (null (gethash (list r c) hashtable)) (eq 1 (aref grid r c)))
      (progn
	(setf (gethash (list r c) hashtable) islandnum)
	(find-adjacent-land (1+ r) c grid hashtable islandnum) ; right
	(find-adjacent-land r (1+ c) grid hashtable islandnum)))) ; down
      
(num-islands2 *grid*); 3 and returns the hash table
(maphash #'(lambda (k v) (format t "k: ~a v: ~a~%" k v)) (num-islands2 *grid*)); print all the mappings of th islands
(maphash #'(lambda (k v) (if (eq 1 v) (format t "k: ~a v: ~a~%" k v))) (num-islands2 *grid*)); show me the first island




;;coin collecting - given an amount and coin denimonations find smallest num of coins
;;assumpiton - largest coin to smallest will give you an answer
;;if largest to smallest sometimes wont work, then try smallest and repeat
(truncate 25 3); 8 1 - so we have the num of coins and the amount left

;;for 25 can use 11*2 + 1 * 3 = 25 => 12 coins, but we can do better
;;25 = 25 - 2 = 23, 23 - 2 = 21, (tuncate 21 3) = 7 remainder 0 => 9 coins

;;say coins = {5, 3, 2}

;;could make a recursive solution 
;;best say we have 7 as the number and coins 2 3, then we know that
;; it's num to 6 + num to 1 - not possible to get the one
;; or num to 5 and num to 2 - 5 = 2 coins 2 = 1 coin = 3 coins 
;;or num to 4 and num to 3  - 4 = 2 coins 3 = 1 coin = 3 coins 


;;and if we always subtract the smallest incrment we'll get the best result
;;now how do we get the min to start the table

;lets have an array that stores these values
; 2 3 5
;0 = nil
;2 = 1
;3 = 1
;4 = leastcoins(4) - 2 = leastcoins(2) + leastcoins(2)  = 1 + 1 = 2
;5 = 1 
;6 = min of getting to 6 = 2 or 6 = 4 + 2, see how if it's under the max value then no point and might as well try with the smaller number
;7 = 5 + 2 = 2
;8 = 5 + 3 = 2
;9 = 5 + 3 + 1 (impossible) OR 9 = 7 + 2 = 2 + 1 = 3
;10 = 2
;11 = 10 + 1 or 9 + 2 = 3 + 1 = 4
;12 = 2
;13 = 12 + 1
;;;doesn't work
;;think of a map that expands like a tree

;;;;TRY 2;;;;
;;take 2 3 9 10
;;know we can make 2 3 9 10 with n = 1 coin
;;with n = 2 (coins) => we can make 10 + 9 , 10 + 3, 10 + 2, 9 + 3, 9 + 2, 3 + 2
;; ((19 2) (13 2) (12 2) (11 2) (5 2)); then we do that again for 3 coins 
;;n = 3 coins
;;idea is create all the outcomes you can make with n coins and
;;then see if your number comes up

;;stop when all the numbers end up > than what you find in the hash
;;or stop when you find T you are looking for


(defun min-change (amount coins-arry)
  (let ((h (make-hash-table))
	(i 0)
	(coins (sort coins-arry #'>)))
    (while (< i (length coins))
      (setf (gethash (aref coins i) h) 1))
    (min-change-helper amount coins h 1)))

;;target, coins array, hashtable with the mapping, number of coins
;;get list of all the 
(defun min-change-helper (target coins hash n)
  (let ((list-min-targs nil))
    (maphash #'(lambda (k v) (if (eq n v) (push k list-min-targs))) hash); fill list-min-targs with the 
    (cond ((null list-min-targs) nil) ;means we didn't find the target
	  (t (dolist (elem list-min-targs)
	       (let ((i 0))
		 (while (< i (length coins))
		   (let ((subtarget  (+ elem (aref coins i))))
		     (cond ((eq elem target) (gethash elem hash))
			   ((eq subtarget target) (+ n 1))
			   ((and (< subtarget target) ;say the min coins 10 + 9 = 19  and make sure it's less than the target of 20 (if the target was 18 we would have gone over)
				 (null (gethash subtarget hash))) ;and we haven't seen it before
			    (setf (gethash subtarget hash) (+ n 1))))))))
	     (min-change-helper target coins hash (+ n 1))))))
			   
	    
